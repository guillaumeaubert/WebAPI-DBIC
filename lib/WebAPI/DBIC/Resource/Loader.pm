package WebAPI::DBIC::Resource::Loader;

our $VERSION = 0.0001;

use Moo;

use IO::All;

has namespace => (is => 'ro', required => 1);
has schema => (is => 'ro', required => 1);
has output_dir => (is => 'ro', default => 'lib');

sub make_resources {
    my ($self, @resources) = @_;

    @resources = $self->schema->sources unless scalar @resources;

    for my $resource (@resources){
        next unless $self->schema->resultset($resource);

        $self->generate_resource_class($resource);
        $self->generate_resourceset_class($resource)
    }
}

sub generate_resource_class {
    my ($self, $resource) = @_;

    my $package_name = $self->namespace.'::Resource::'.$resource;
    (my $filename = $self->output_dir."::$package_name.pm") =~ s#::#/#g;
    my $output = io($filename)->assert;

    $output->print(join "\n",
        $self->_generate_header($resource),
        $self->_generate_resourceset_parent,
        $self->_generate_autogenerated_message,
        $self->_generate_footer,
    );
}

sub generate_resourceset_class {
    my ($self, $resource) = @_;

    my $package_name = $self->namespace.'::ResourceSet::'.$resource;
    (my $filename = $self->output_dir."::$package_name.pm") =~ s#::#/#g;
    my $output = io($filename)->assert;

    $output->print(join "\n",
        $self->_generate_header($resource),
        $self->_generate_resourceset_parent,
        $self->_generate_autogenerated_message,
        $self->_generate_footer,
    );
}

sub _generate_header {
    my ($self, $package) = @_;

    return <<EOF;
use utf8;
package $package;

use Moo;
EOF
}

sub _generate_resource_parent {
    return <<EOF;
extends 'WebAPI::DBIC::Resource::GenericItem';
EOF
}

sub _generate_resourceset_parent {
    return <<EOF;
extends 'WebAPI::DBIC::Resource::GenericSet';
EOF
}

sub _generate_autogenerated_message {
    return <<EOF;
# THIS PACKAGE WAS AUTOGENERATED BY WebAPI::DBIC::Resource::Loader ($WebAPI::DBIC::Resource::Loader::VERSION)
EOF
}

sub _generate_footer {
    return <<EOF;
1;
EOF
}

1;
